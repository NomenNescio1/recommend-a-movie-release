{"version":3,"sources":["not-found.png","serviceWorker.js","components/Movie.js","components/Search.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Movie","props","undefined","className","onClick","src","poster_path","notfound","alt","title","release_date","substring","overview","axios","require","default","ReactDOM","render","useState","searchResults","setSearchResults","error","setError","selectedMovie","setSelectedMovie","backgroundImage","setBgImage","message","setMessage","refContainer","useRef","useEffect","get","Math","floor","random","then","response","x","bgImage","data","results","map","e","backdrop_path","catch","console","log","scrollTo","where","scroller","duration","delay","smooth","scrollToTop","scroll","fetchSource","isSearch","movie","apiSearchMovie","current","value","apiGetRecommended","id","total_results","length","style","onSubmit","preventDefault","ref","name","type","key","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ce78ce9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not-found.d53a55c8.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\r\nimport notfound from '../not-found.png';\r\n\r\nconst Movie = (props) => {\r\n    return (\r\n        props !== undefined &&\r\n            <div className=\"movie-card\" onClick={props.onClick} >\r\n                <img className=\"poster-image\" src={props.poster_path ? `https://lucky-smoke-8bb3.cors-bypass.workers.dev/?https://image.tmdb.org/t/p/w600_and_h900_bestv2${props.poster_path}` : notfound} alt=\"\" />\r\n                <div className=\"movie-data\">\r\n                    <h1>{props.title} {props.release_date && <span>({props.release_date.substring(0, 4)})</span>}</h1>\r\n                    <p>{props.overview}</p></div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Element, scroller, animateScroll as scroll } from 'react-scroll';\r\nimport '../App.css';\r\nimport Movie from \"./Movie\";\r\nconst axios = require('axios').default;\r\n\r\nexport const Search = () => {\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [selectedMovie, setSelectedMovie] = useState([]);\r\n    const [backgroundImage, setBgImage] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const refContainer = useRef('');\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://lucky-smoke-8bb3.cors-bypass.workers.dev/?https://api.themoviedb.org/3/discover/movie?api_key=acf4ef5820f3e83505c36c1c840be2ee&page=${Math.floor((Math.random() * 500) + 0)}`)\r\n            .then(response => {\r\n                let x = Math.floor((Math.random() * 20) + 0);\r\n                let bgImage = response.data.results.map(e => [e.backdrop_path, e.title]);\r\n                setBgImage(bgImage[x]);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }, [])\r\n\r\n    const scrollTo = (where) => {\r\n        scroller.scrollTo(where, {\r\n            duration: 600,\r\n            delay: 0,\r\n            smooth: 'easeInOutQuart'\r\n        })\r\n    }\r\n    const scrollToTop = () => {\r\n        scroll.scrollToTop();\r\n    }\r\n    const fetchSource = (isSearch = true, movie = []) => {\r\n\r\n        const apiSearchMovie = `https://lucky-smoke-8bb3.cors-bypass.workers.dev/?https://api.themoviedb.org/3/search/movie?api_key=acf4ef5820f3e83505c36c1c840be2ee&language=en-US&query=${refContainer.current.value}&page=1&include_adult=false`;\r\n        const apiGetRecommended = `https://lucky-smoke-8bb3.cors-bypass.workers.dev/?https://api.themoviedb.org/3/movie/${movie.id}/recommendations?api_key=acf4ef5820f3e83505c36c1c840be2ee&language=en-US&page=1`;\r\n        axios.get(isSearch ? apiSearchMovie : apiGetRecommended)\r\n            .then(response => {\r\n                // handle success\r\n                setSearchResults(response.data.total_results && response.data.results);\r\n                setSelectedMovie(movie);\r\n                scrollTo('results-container');\r\n                if (response.data.total_results === 0 && isSearch) {\r\n                    setError('No movies found.')\r\n                    setSearchResults(null);\r\n                } else if (response.data.total_results === 0 && !isSearch) {\r\n                    setError('There are no movies recommended.')\r\n                    setSearchResults(null);\r\n                } else if (selectedMovie.length !== 0 && isSearch === false) {\r\n                    scrollTo('results-container');\r\n                    setError(null);\r\n                    setMessage(<p>Keep selecting movies to get more recommendations. Or <span className=\"search-link\" onClick={() => scrollToTop()}>search</span> a different movie to get different recommendations.</p>)\r\n                } else if (isSearch && response.data.total_results) {\r\n                    setMessage('These are the results for your search, select one:');\r\n                    setError(null);\r\n                }\r\n                else if (isSearch === false && selectedMovie) {\r\n                    setMessage('Here\\'s the movie you choosed, scroll down to check the recommendations!')\r\n                    setError(null);\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"search-container\" style={{ backgroundImage: `url(https://lucky-smoke-8bb3.cors-bypass.workers.dev/?https://image.tmdb.org/t/p/w1280${backgroundImage[0]}` }}>\r\n                <div className=\"search-content\">\r\n                    <div className=\"header\">\r\n                        <h2 className=\"big-header\">Recommend-A-Movie</h2>\r\n                        <h3>Search for a movie and get recommendations!</h3>\r\n                    </div>\r\n                    <form className=\"form\" onSubmit={(e) => (e.preventDefault())}>\r\n                        <input ref={refContainer} name=\"moviename\" type=\"text\" />\r\n                        <input onClick={() => fetchSource(true)} type=\"submit\" value=\"GO!\" />\r\n                    </form>\r\n                    {error && <p className=\"error\">{error}</p>}\r\n                    <div className=\"overlay\"></div>\r\n                    <span className=\"bg-name\">{backgroundImage[1]}</span>\r\n                </div>\r\n            </div>\r\n            {refContainer.current.value && searchResults !== null &&\r\n                <Element name=\"results-container\">\r\n                    <div className=\"results-container\">\r\n                        {searchResults && <h3>{message}</h3>}\r\n                        {selectedMovie.length !== 0 && searchResults &&\r\n                            <div className=\"selected-movie\">\r\n                                <Movie poster_path={selectedMovie.poster_path} title={selectedMovie.title} release_date={selectedMovie.release_date} overview={selectedMovie.overview}></Movie>\r\n                            </div>}\r\n                        <Element name=\"results\">\r\n                        {refContainer.current.value && selectedMovie.title && searchResults && <h2>Recommended movies based on {selectedMovie.title}</h2>}\r\n                            <div className=\"results\">\r\n                                {searchResults ?\r\n                                    searchResults.map((movie) => {\r\n                                        return <Movie key={movie.id} onClick={() => fetchSource(false, movie)} poster_path={movie.poster_path} title={movie.title} id={movie.id} release_date={movie.release_date} overview={movie.overview}></Movie>\r\n                                    }) : error === 'not-found'}\r\n                            </div>\r\n                        </Element>\r\n                    </div>\r\n                    <span className=\"toTop\" onClick={() => scrollToTop()}>&uarr;</span>\r\n                </Element>}\r\n        </div>\r\n\r\n        // https://image.tmdb.org/t/p/w600_and_h900_bestv2/qNeGtQaatgMGrS60xZ0yMOVblVJ.jpg\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Search} from './components/Search';\n\nReactDOM.render(<Search />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}